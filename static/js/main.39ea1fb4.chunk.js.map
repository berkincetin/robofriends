{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","cardListArray","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","console","log","style","overflowY","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ErrorBoundry","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"oOAeeA,EAbF,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAExB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACA,4BAAKF,GACL,2BAAIC,MCcDK,EApBE,SAAC,GAAc,IAGtBC,EAHqB,EAAZC,OAGcC,KAAI,SAACC,EAAKC,GACvC,OACA,kBAAC,EAAD,CACIC,IAAKD,EACLT,GAAKQ,EAAKR,GACVF,KAAMU,EAAKV,KACXC,MAAOS,EAAKT,WAIhB,OACI,6BACKM,ICHEM,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKZ,UAAW,OAChB,2BACAA,UAAY,mCACZa,KAAK,SACLC,YAAY,gBACZC,SAAYH,MCKLI,EAZA,SAACC,GAEZ,OADAC,QAAQC,IAAIF,GAER,yBAAKG,MAAO,CAACC,UAAW,SAAWC,OAAQ,UACtCL,EAAMM,WCgBJC,E,kDAnBX,WAAYP,GAAO,IAAD,8BACd,cAAMA,IACDQ,MAAQ,CACTC,UAAU,GAHA,E,8DAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACJ,8EAEJG,KAAKZ,MAAMM,a,GAhBEQ,aC8CbC,G,wDAtCX,aAAe,IAAD,8BACV,gBAYJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACnB,YAAauB,EAAMC,OAAOC,SAZzC,EAAKX,MAAQ,CACTpB,OAAQ,GACRM,YAAa,IAJP,E,gEAOO,IAAD,OAChB0B,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAEzB,OAAQoC,S,+BAOjC,IAAD,EAC0BZ,KAAKJ,MAA5BpB,EADH,EACGA,OAAQM,EADX,EACWA,YACV+B,EAAiBb,KAAKJ,MAAMpB,OAAOsC,QAAO,SAAAC,GAC5C,OAAOA,EAAM/C,KAAKgD,cAAcC,SAASnC,EAAYkC,kBAIzD,OAASxC,EAAO0C,OACP,yBAAK/C,UAAU,MACZ,wBAAIA,UAAY,MAAhB,gBACA,kBAAC,EAAD,CAAWY,aAAciB,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAACe,EAAD,KACI,kBAAC,EAAD,CAAU3C,OAASqC,OANb,wBAAI1C,UAAU,MAAd,e,GAzBhB+B,cCGEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,EAAD,OAEAC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLT,QAAQS,MAAMA,EAAMsC,a","file":"static/js/main.39ea1fb4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id }) => {\r\n\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card  from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\r\n    \r\n    const cardListArray = robots.map((user,i) => {\r\n    return (\r\n    <Card \r\n        key={i} \r\n        id ={user.id} \r\n        name={user.name} \r\n        email={user.email} \r\n    />\r\n    );\r\n    })\r\n    return (\r\n        <div>\r\n            {cardListArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className =\"pa2\">\r\n        <input \r\n        className = \"pa3 ba b--green bg-lightest-blue\"\r\n        type='search' \r\n        placeholder='Search Robots' \r\n        onChange = {searchChange}\r\n        />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    console.log(props);\r\n    return (\r\n        <div style={{overflowY: 'scroll',  height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooops. That is not good. Something went wrong.</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\n\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=> response.json())\n        .then(users => this.setState({ robots: users}));\n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value })\n\n    }\n    render() {\n        const { robots, searchfield} = this.state;\n        const filteredRobots = this.state.robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n\n        })\n\n        return (!robots.length) ? <h1 className=\"tc\">Loading</h1> :\n                (<div className=\"tc\">\n                    <h1 className = 'f1'>Robo Friends</h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots ={filteredRobots} />\n\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>)\n        }\n    }\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}